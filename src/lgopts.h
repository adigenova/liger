/** @file lgopts.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef LGOPTS_H
#define LGOPTS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Liger"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Liger"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * contigs_arg;	/**< @brief Fasta file.  */
  char * contigs_orig;	/**< @brief Fasta file original value given at command line.  */
  const char *contigs_help; /**< @brief Fasta file help description.  */
  char * longreads_arg;	/**< @brief Fasta file of long reads.  */
  char * longreads_orig;	/**< @brief Fasta file of long reads original value given at command line.  */
  const char *longreads_help; /**< @brief Fasta file of long reads help description.  */
  char * samlist_arg;	/**< @brief List of synthetic libraries (SAM files).  */
  char * samlist_orig;	/**< @brief List of synthetic libraries (SAM files) original value given at command line.  */
  const char *samlist_help; /**< @brief List of synthetic libraries (SAM files) help description.  */
  char * prefix_arg;	/**< @brief Prefix for output files.  */
  char * prefix_orig;	/**< @brief Prefix for output files original value given at command line.  */
  const char *prefix_help; /**< @brief Prefix for output files help description.  */
  int cpu_arg;	/**< @brief Number of thread to use (default='1').  */
  char * cpu_orig;	/**< @brief Number of thread to use original value given at command line.  */
  const char *cpu_help; /**< @brief Number of thread to use help description.  */
  char * ccoverage_arg;	/**< @brief File coverage for each contig.  */
  char * ccoverage_orig;	/**< @brief File coverage for each contig original value given at command line.  */
  const char *ccoverage_help; /**< @brief File coverage for each contig help description.  */
  int mcl_arg;	/**< @brief Minimum contig length (default='500').  */
  char * mcl_orig;	/**< @brief Minimum contig length original value given at command line.  */
  const char *mcl_help; /**< @brief Minimum contig length help description.  */
  int mcs_arg;	/**< @brief Minimum contig length in scaffolding (default='2000').  */
  char * mcs_orig;	/**< @brief Minimum contig length in scaffolding original value given at command line.  */
  const char *mcs_help; /**< @brief Minimum contig length in scaffolding help description.  */
  float rcn_arg;	/**< @brief Repeat copy number factor (rcn) (default='1.5').  */
  char * rcn_orig;	/**< @brief Repeat copy number factor (rcn) original value given at command line.  */
  const char *rcn_help; /**< @brief Repeat copy number factor (rcn) help description.  */
  int lme_arg;	/**< @brief Length of long mate-edges (default='100000').  */
  char * lme_orig;	/**< @brief Length of long mate-edges original value given at command line.  */
  const char *lme_help; /**< @brief Length of long mate-edges help description.  */
  int nlm_arg;	/**< @brief Number of long-read needed to keep a potencial erroneus mate-edge (default='5').  */
  char * nlm_orig;	/**< @brief Number of long-read needed to keep a potencial erroneus mate-edge original value given at command line.  */
  const char *nlm_help; /**< @brief Number of long-read needed to keep a potencial erroneus mate-edge help description.  */
  int mlp_arg;	/**< @brief Minimum length of reduced paths to convert them to physical fragments (default='20000').  */
  char * mlp_orig;	/**< @brief Minimum length of reduced paths to convert them to physical fragments original value given at command line.  */
  const char *mlp_help; /**< @brief Minimum length of reduced paths to convert them to physical fragments help description.  */
  int minimizer_size_arg;	/**< @brief Minimizer size (default='17').  */
  char * minimizer_size_orig;	/**< @brief Minimizer size original value given at command line.  */
  const char *minimizer_size_help; /**< @brief Minimizer size help description.  */
  int minimizer_window_arg;	/**< @brief Minimizer window (default='5').  */
  char * minimizer_window_orig;	/**< @brief Minimizer window original value given at command line.  */
  const char *minimizer_window_help; /**< @brief Minimizer window help description.  */
  int minimizer_freq_arg;	/**< @brief Max minimizer frequency (default='1000').  */
  char * minimizer_freq_orig;	/**< @brief Max minimizer frequency original value given at command line.  */
  const char *minimizer_freq_help; /**< @brief Max minimizer frequency help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int contigs_given ;	/**< @brief Whether contigs was given.  */
  unsigned int longreads_given ;	/**< @brief Whether longreads was given.  */
  unsigned int samlist_given ;	/**< @brief Whether samlist was given.  */
  unsigned int prefix_given ;	/**< @brief Whether prefix was given.  */
  unsigned int cpu_given ;	/**< @brief Whether cpu was given.  */
  unsigned int ccoverage_given ;	/**< @brief Whether ccoverage was given.  */
  unsigned int mcl_given ;	/**< @brief Whether mcl was given.  */
  unsigned int mcs_given ;	/**< @brief Whether mcs was given.  */
  unsigned int rcn_given ;	/**< @brief Whether rcn was given.  */
  unsigned int lme_given ;	/**< @brief Whether lme was given.  */
  unsigned int nlm_given ;	/**< @brief Whether nlm was given.  */
  unsigned int mlp_given ;	/**< @brief Whether mlp was given.  */
  unsigned int minimizer_size_given ;	/**< @brief Whether minimizer_size was given.  */
  unsigned int minimizer_window_given ;	/**< @brief Whether minimizer_window was given.  */
  unsigned int minimizer_freq_given ;	/**< @brief Whether minimizer_freq was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* LGOPTS_H */
